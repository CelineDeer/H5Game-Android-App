package com.blue.sky.h5.login;import android.content.Intent;import android.content.SharedPreferences;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.text.TextUtils;import android.util.Log;import android.view.View;import android.view.View.OnClickListener;import android.widget.*;import com.blue.sky.h5.game.MyApplication;import com.blue.sky.common.activity.BaseActivity;import com.blue.sky.common.cache.UserInfo;import com.blue.sky.common.config.AppConstants;import com.blue.sky.common.entity.User;import com.blue.sky.common.http.Action;import com.blue.sky.common.http.HttpAsyncStringResult;import com.blue.sky.common.http.HttpRequestAPI;import com.blue.sky.common.message.ActionManager;import com.blue.sky.h5.game.setting.ChangePasswordActivity;import com.blue.sky.h5.game.R;import com.blue.sky.common.utils.*;import com.sina.weibo.sdk.auth.Oauth2AccessToken;import com.sina.weibo.sdk.auth.WeiboAuth;import com.sina.weibo.sdk.auth.WeiboAuthListener;import com.sina.weibo.sdk.auth.sso.SsoHandler;import com.sina.weibo.sdk.exception.WeiboException;import com.tencent.connect.auth.QQAuth;import com.tencent.tauth.IUiListener;import com.tencent.tauth.Tencent;import com.tencent.tauth.UiError;import org.json.JSONException;import org.json.JSONObject;/** * @author hubcarl * @保存方式：SharedPreference * @注意：SharedPreference 可以跨程序包使用，多谢二楼童鞋提醒！ * @操作模式: Context.MODE_PRIVATE：新内容覆盖原内容 Context.MODE_APPEND：新内容追加到原内容后 * Context.MODE_WORLD_READABLE：允许其他应用程序读取 * Context.MODE_WORLD_WRITEABLE：允许其他应用程序写入，会覆盖原数据。 */public class LoginActivity extends BaseActivity {    private static final String LOGIN_DATE = "LoginDate";    private EditText txtUserEmail;    private EditText txtPassword;    private TextView btnLogin;    private TextView btnRegister;    private TextView lblTitle;    private TextView forgot_password;    private TextView loginStatus;    private ImageView loginIcon;    private ImageView qqLogin;    private ImageView weiboLogin;    public static QQAuth mQQAuth;    private Tencent mTencent;    /** 微博 Web 授权类，提供登陆等功能  */    private WeiboAuth mWeiboAuth;    /** 封装了 "access_token"，"expires_in"，"refresh_token"，并提供了他们的管理功能  */    private Oauth2AccessToken mAccessToken;    /** 注意：SsoHandler 仅当 SDK 支持 SSO 时有效 */    private SsoHandler mSsoHandler;    private ProgressBar progressBar;    private SharedPreferences sharePrefer;    private com.tencent.connect.UserInfo mInfo;    private String openid;    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.sky_activity_login);        setHeader("登陆", true);        lblTitle = (TextView) findViewById(R.id.tv_title);        loginIcon = (ImageView) findViewById(R.id.login_icon);        loginStatus = (TextView) findViewById(R.id.login_status);        btnLogin = (TextView) findViewById(R.id.btn_login);        btnLogin.setOnClickListener(loginClickListener);        btnRegister = (TextView) findViewById(R.id.btn_register);        btnRegister.setOnClickListener(registerClickListener);        // 忘记密码        forgot_password = (TextView) findViewById(R.id.forgot_password);        forgot_password.setOnClickListener(new OnClickListener(){            @Override            public void onClick(View v) {                if(NetWorkHelper.isConnect(LoginActivity.this)){                    startActivity(ChangePasswordActivity.class);                }else{                    showToast("亲,没有网络,请检查网络设置!");                }            }        });        txtUserEmail = (EditText) findViewById(R.id.editText_Login);        txtPassword = (EditText) findViewById(R.id.editText_Password);        progressBar = (ProgressBar) this.findViewById(R.id.progressBar);        qqLogin = (ImageView) findViewById(R.id.qq_login);        weiboLogin = (ImageView) findViewById(R.id.weibo_login);        qqLogin.setOnClickListener(qqLoginClickListener);        weiboLogin.setOnClickListener(weiboLoginClickListener);        // 创建QQ实例        mQQAuth = QQAuth.createInstance(AppConstants.QQ_APP_ID, getApplicationContext());        mTencent = Tencent.createInstance(AppConstants.QQ_APP_ID, this);        // 创建微博实例        mWeiboAuth = new WeiboAuth(this,                AppConstants.SINA_WEIBO_APP_KEY,                AppConstants.SINA_WEIBO_REDIRECT_URL,                AppConstants.SINA_WEIBO_SCOPE);        setLoginStatus();    }    private void setLoginStatus(){        txtUserEmail.setText("");        txtPassword.setText("");        UserInfo userInfo = MyApplication.Cookies.getUserInfo();        String loginType = userInfo.getLoginType();        String cacheLogo = userInfo.getUserIcon();        if (Action.Login.QQ.toString().equals(loginType)) {            loginStatus.setText("QQ帐号已登陆");            ImageLoadUtil.loadImageByResId(loginIcon, cacheLogo, R.drawable.icon_qq_logo);            findViewById(R.id.liner_login).setVisibility(View.VISIBLE);        } else if (Action.Login.Sina.toString().equals(loginType)) {            loginStatus.setText("新浪微博帐号已登陆");            ImageLoadUtil.loadImageByResId(loginIcon, cacheLogo, R.drawable.icon_weibo_logo);            findViewById(R.id.liner_login).setVisibility(View.VISIBLE);        } else if (Action.Login.Email.toString().equals(loginType)) {            loginStatus.setText("爱玩帐号已登陆");            txtUserEmail.setText(userInfo.getUserEmail());            txtPassword.setText(userInfo.getPassword());            ImageLoadUtil.loadImageByResId(loginIcon, cacheLogo, R.drawable.ic_launcher);            findViewById(R.id.liner_login).setVisibility(View.VISIBLE);        }else{            findViewById(R.id.liner_login).setVisibility(View.GONE);        }    }    private boolean loginValidate(String userEmail, String userPwd) {        if (!NetWorkHelper.isConnect(this)) {            lblTitle.setText("网络不可用,请检查网络!");            return false;        }        if (Strings.EMPTY_STRING.equals(userEmail)) {            lblTitle.setText("请输入帐号!");            return false;        }        if (!Strings.checkEmail(userEmail)) {            lblTitle.setText("帐号(Email)格式不对!");            return false;        }        if (Strings.isContainSpecialChar(userEmail)) {            lblTitle.setText("帐号包含特殊字符!");            return false;        }        if (Strings.EMPTY_STRING.equals(userPwd)) {            lblTitle.setText("请输入密码!");            return false;        }        return true;    }    private void login(final String userEmail, final String userPwd) {        final String encryptPwd = Encrypt.md5(userPwd);        HttpRequestAPI.login(new User(userEmail, encryptPwd, Action.Login.Email), new HttpAsyncStringResult() {            public void process(String response) {                if (Strings.isNotEmpty(response)) {                    JSONObject jsonObject = null;                    try {                        jsonObject = new JSONObject(response);                        if (jsonObject != null) {                            String resultFlag = jsonObject.getString("result");                            if ("loginSuccess".equals(resultFlag)) {                                UserInfo userInfo = MyApplication.Cookies.getUserInfo();                                userInfo.setUserId(jsonObject.getString("Id"));                                userInfo.setUserName(jsonObject.getString("UserName"));                                userInfo.setUserEmail(userEmail);                                userInfo.setPassword(userPwd);                                userInfo.setUserIcon(Constants.BASE_USER_LOGO + jsonObject.getString("UserIcon"));                                userInfo.setRoleId(jsonObject.getInt("RoleId"));                                userInfo.setLoginType(Action.Login.Email);                                LoginActivity.this.sendBroadcast(new Intent(ActionManager.ACTION_LOGIN));                                showToast("登陆成功");                                finish();                            } else if ("loginError".equals(resultFlag) || "loginPwdError".equals(resultFlag)) {                                lblTitle.setText("用户名密码错误,请重新输入!");                            } else if ("loginNotUser".equals(resultFlag)) {                                lblTitle.setText("帐号不存在，请检查你的用户名!");                            } else {                                lblTitle.setText("登陆未知异常,请重试!");                            }                        }                    } catch (JSONException e) {                        lblTitle.setText("登陆未知异常,请重试!");                        Log.e("login", "login error:" + e.toString());                    }                } else {                    lblTitle.setText("登陆未知异常,请重试!");                }                progressBar.setVisibility(View.GONE);                btnLogin.setEnabled(true);            }        });    }    private OnClickListener registerClickListener = new OnClickListener() {        @Override        public void onClick(View v) {            startActivity(RegisterActivity.class);            finish();        }    };    private OnClickListener loginClickListener = new OnClickListener() {        @Override        public void onClick(View v) {            progressBar.setVisibility(View.VISIBLE);            String userEmail = txtUserEmail.getText().toString().trim();            String userPwd = txtPassword.getText().toString().trim();            if (loginValidate(userEmail, userPwd)) {                btnLogin.setEnabled(false);                //sleep(1);                login(userEmail,userPwd);            } else {                progressBar.setVisibility(View.GONE);            }        }    };    private OnClickListener qqLoginClickListener = new OnClickListener() {        @Override        public void onClick(View v) {            onClickLogin();        }    };    private OnClickListener weiboLoginClickListener = new OnClickListener() {        @Override        public void onClick(View v) {            mSsoHandler = new SsoHandler(LoginActivity.this, mWeiboAuth);            mSsoHandler.authorize(new AuthListener());        }    };    /**     * 当 SSO 授权 Activity 退出时，该函数被调用。     *     * @see {@link android.app.Activity#onActivityResult}     */    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        // SSO 授权回调        // 重要：发起 SSO 登陆的 Activity 必须重写 onActivityResult        if (mSsoHandler != null) {            mSsoHandler.authorizeCallBack(requestCode, resultCode, data);        }    }    /**     * 微博认证授权回调类。     * 1. SSO 授权时，需要在 {@link #onActivityResult} 中调用 {@link SsoHandler#authorizeCallBack} 后，     *    该回调才会被执行。     * 2. 非 SSO 授权时，当授权结束后，该回调就会被执行。     * 当授权成功后，请保存该 access_token、expires_in、uid 等信息到 SharedPreferences 中。     */    class AuthListener implements WeiboAuthListener {        @Override        public void onComplete(Bundle values) {            // 从 Bundle 中解析 Token            mAccessToken = Oauth2AccessToken.parseAccessToken(values);            if (mAccessToken.isSessionValid()) {                Log.d(">>>mAccessToken", mAccessToken.getUid());                // 保存 Token 到 SharedPreferences                AccessTokenKeeper.writeAccessToken(LoginActivity.this, mAccessToken);                MyApplication.Cookies.getUserInfo().setUserName("新浪微博用户");                MyApplication.Cookies.getUserInfo().setUserEmail(mAccessToken.getUid());                MyApplication.Cookies.getUserInfo().setUserIcon(Strings.EMPTY_STRING);                MyApplication.Cookies.getUserInfo().setLoginType(Action.Login.Sina);                LoginActivity.this.sendBroadcast(new Intent(ActionManager.ACTION_LOGIN));                openLogin(mAccessToken.getUid(),"新浪微博用户","", Action.Login.Sina);                Toast.makeText(LoginActivity.this, R.string.weibosdk_demo_toast_auth_success, Toast.LENGTH_SHORT).show();                setLoginStatus();            } else {                // 以下几种情况，您会收到 Code：                // 1. 当您未在平台上注册的应用程序的包名与签名时；                // 2. 当您注册的应用程序包名与签名不正确时；                // 3. 当您在平台上注册的包名和签名与您当前测试的应用的包名和签名不匹配时。                String code = values.getString("code");                String message = getString(R.string.weibosdk_demo_toast_auth_failed);                if (!TextUtils.isEmpty(code)) {                    message = message + "\nObtained the code: " + code;                }                Toast.makeText(LoginActivity.this, message, Toast.LENGTH_LONG).show();            }        }        @Override        public void onCancel() {            Toast.makeText(LoginActivity.this,                    R.string.weibosdk_demo_toast_auth_canceled, Toast.LENGTH_LONG).show();        }        @Override        public void onWeiboException(WeiboException e) {            Toast.makeText(LoginActivity.this,                    "Auth exception : " + e.getMessage(), Toast.LENGTH_LONG).show();        }    }    private void onClickLogin() {        if (!mQQAuth.isSessionValid()) {            IUiListener listener = new BaseUiListener() {                @Override                protected void doComplete(JSONObject values) {                    updateUserInfo();                }            };            //mQQAuth.login(this, "all", listener);            mTencent.loginWithOEM(this, "all", listener,"10000144","10000144","xxxx");        } else {            mQQAuth.logout(this);            updateUserInfo();        }    }    private class BaseUiListener implements IUiListener {        @Override        public void onComplete(Object response) {            Log.d("login response onComplete:",response.toString());            //Util.showResultDialog(LoginActivity.this, response.toString(), "登陆成功");            doComplete((JSONObject)response);        }        protected void doComplete(JSONObject response) {            try {               openid = response.getString("openid");            } catch (JSONException e) {            }        }        @Override        public void onError(UiError e) {            Util.toastMessage(LoginActivity.this, "onError: " + e.errorDetail);            Util.dismissDialog();        }        @Override        public void onCancel() {            Util.toastMessage(LoginActivity.this, "onCancel: ");            Util.dismissDialog();        }    }    Handler mHandler = new Handler() {        @Override        public void handleMessage(Message msg) {            if (msg.what == 0) {                JSONObject response = (JSONObject) msg.obj;                Log.d("login response:",response.toString());                String nickName = Strings.EMPTY_STRING;                if (response.has("nickname")) {                    try {                        nickName = response.getString("nickname");                        UIHelp.showToast(LoginActivity.this, "QQ登陆成功!");                    } catch (JSONException e) {                        // TODO Auto-generated catch block                        e.printStackTrace();                    }                }                String icon = Strings.EMPTY_STRING;                if(response.has("figureurl")){                    try {                        icon = response.getString("figureurl_qq_2");                        ImageLoadUtil.loadImage(icon);                    } catch (JSONException e) {                    }                }                openLogin(openid, nickName, icon, Action.Login.QQ);                MyApplication.Cookies.getUserInfo().setUserName(nickName);                MyApplication.Cookies.getUserInfo().setUserEmail("QQ账号登陆");                MyApplication.Cookies.getUserInfo().setUserIcon(icon);                MyApplication.Cookies.getUserInfo().setLoginType(Action.Login.QQ);                LoginActivity.this.sendBroadcast(new Intent(ActionManager.ACTION_LOGIN));                setLoginStatus();            }        }    };    private void updateUserInfo() {        if (mQQAuth != null && mQQAuth.isSessionValid()) {            IUiListener listener = new IUiListener() {                @Override                public void onError(UiError e) {                    // TODO Auto-generated method stub                }                @Override                public void onComplete(final Object response) {                    Message msg = new Message();                    msg.obj = response;                    msg.what = 0;                    mHandler.sendMessage(msg);                }                @Override                public void onCancel() {                    // TODO Auto-generated method stub                }            };//			LoginActivity.mTencent.requestAsync(Constants.GRAPH_SIMPLE_USER_INFO, null,//	                    Constants.HTTP_GET, requestListener, null);            mInfo = new com.tencent.connect.UserInfo(this, mQQAuth.getQQToken());            mInfo.getUserInfo(listener);        }    }    private void openLogin(String openid,String nickName,String icon,Action.Login loginType){        User user = new User();        user.setOpenid(openid);        user.setNickName(nickName);        user.setIcon(icon);        user.setLoginType(loginType);        HttpRequestAPI.openLogin(user, new HttpAsyncStringResult() {            public void process(String userId) {                Log.d(">>>openLogin userId:", userId);                if(Strings.isNumeric(userId)){                    MyApplication.Cookies.getUserInfo().setUserId(userId);                }            }        });    }}